/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import org.json.simple.*;
import org.json.simple.parser.*;
//import org.json.simple.parser.ParseException;

import java.io.*;
import java.util.*;


public class App {
    public App() {/* compiled code */}

    //sunt private pentru a putea folosi aplicatia doar din linia de comanda in metoda main
    private static void create_user(String username, String password) {
        JSONParser jsonParser = new JSONParser();
        JSONObject credentialsList = null;
        JSONArray usersList = null;
        File file1 = new File("credentials.json");
        File file2 = new File("users.json");
        try (FileReader reader1 = new FileReader(file1); FileReader reader2 = new FileReader(file2)) {
            if (file1.length() != 0 && file2.length() != 0) {
                Object obj1 = jsonParser.parse(reader1);
                credentialsList = (JSONObject) obj1;
                if (credentialsList.containsKey(username)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'User already exists'}");
                    return;
                }
                Object obj2 = jsonParser.parse(reader2);
                usersList = (JSONArray) obj2;
            } else {
                credentialsList = new JSONObject();
                usersList = new JSONArray();
            }
            credentialsList.put(username, password);
            User newUser = new User(username);
            JSONObject user = newUser.toJSONObject();
            usersList.add(user);
            try (FileWriter writer1 = new FileWriter("credentials.json", false); FileWriter writer2 = new FileWriter("users.json", false)) {
                writer1.write(credentialsList.toJSONString());
                writer2.write(usersList.toJSONString());
                writer1.flush();
                writer2.flush();
                System.out.print("{ 'status' : 'ok', 'message' : 'User created successfully'}");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }

    }

    private static User login(String username, String password) {
        JSONParser jsonParser = new JSONParser();
        JSONObject credentialsList = null;
        JSONArray usersList = null;
        File file1 = new File("credentials.json");
        File file2 = new File("users.json");
        if (file1.length() != 0 && file2.length() != 0) {
            try (FileReader reader1 = new FileReader(file1); FileReader reader2 = new FileReader(file2)) {
                Object obj1 = jsonParser.parse(reader1);
                credentialsList = (JSONObject) obj1;
                if (!credentialsList.get(username).equals(password)) {
                    //System.out.print("{'status':'error','message':'Login failed'}");
                    return null;
                } else {
                    Object obj2 = jsonParser.parse(reader2);
                    usersList = (JSONArray) obj2;
                    for (int i = 0; i < usersList.size(); i++) {
                        JSONObject userJSON = (JSONObject)usersList.get(i);
                        if (username.equals((String)userJSON.get("username"))) {
                            return new User(userJSON);
                        }
                    }
                }
            } catch (ParseException | IOException e) {
                throw new RuntimeException(e);
            }
        }
        return null;
    }
    private static void get_most_liked_posts() {
        JSONParser jsonParser = new JSONParser();
        JSONArray postsList = null;
        File file = new File("posts.json");
        try {
            ArrayList<Post> postsArray = new ArrayList<>();
            if (file.length() != 0) {
                FileReader reader = new FileReader(file);
                Object obj = jsonParser.parse(reader);
                postsList = (JSONArray) obj;

                for (int i = 0; i < postsList.size(); i++) {
                    JSONObject postJSON = (JSONObject)postsList.get(i);
                    if (!(boolean)postJSON.get("deleted")) {
                        Post post = new Post(postJSON);
                        postsArray.add(post);
                    }

                }
                Collections.sort(postsArray, Comparator.reverseOrder());
            }
            ArrayList<String> postsInfo = new ArrayList<>();
            for (int i = 0; i < postsArray.size() && i < 5; i++) {
                    String info = "{'post_id':'" + postsArray.get(i).getId() + "','post_text':'" +  postsArray.get(i).getText() + "','post_date':'" +  postsArray.get(i).getDate() + "','username':'" + postsArray.get(i).getOwner() + "','number_of_likes':'" + postsArray.get(i).getNrLikes() + "'}";
                    postsInfo.add(info);

            }
            System.out.print("{ 'status' : 'ok', 'message' : " + postsInfo.toString().replace(", ", ",").replace("}]", "} ]") + "}");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException | java.text.ParseException e) {
            throw new RuntimeException(e);
        }
    }

    private static void get_most_commented_posts() {
        JSONParser jsonParser = new JSONParser();
        JSONArray postsList = null;
        File file = new File("posts.json");
        try {
            ArrayList<Post> postsArray = new ArrayList<>();
            if (file.length() != 0) {
                FileReader reader = new FileReader(file);
                Object obj = jsonParser.parse(reader);
                postsList = (JSONArray) obj;

                for (int i = 0; i < postsList.size(); i++) {
                    JSONObject postJSON = (JSONObject)postsList.get(i);
                    if (!(boolean)postJSON.get("deleted")) {
                        Post post = new Post(postJSON) {
                        public int compareTo (Object o) {
                                if (getNrComments() < ((Post)o).getNrComments()) {
                                    return -1;
                                } else if (getNrComments()  > ((Post)o).getNrComments()) {
                                    return 1;
                                }
                                return  0;
                            }
                        };
                        postsArray.add(post);
                    }

                }
                Collections.sort(postsArray, Comparator.reverseOrder());
            }
            ArrayList<String> postsInfo = new ArrayList<>();
            for (int i = 0; i < postsArray.size() && i < 5; i++) {
                String info = "{'post_id':'" + postsArray.get(i).getId() + "','post_text':'" +  postsArray.get(i).getText() + "','post_date':'" +  postsArray.get(i).getDate() + "','username':'" + postsArray.get(i).getOwner() + "','number_of_comments':'" + postsArray.get(i).getNrComments() + "'}";
                postsInfo.add(info);

            }
            System.out.print("{ 'status' : 'ok', 'message' : " + postsInfo.toString().replace(", ", ",") + "}");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException | java.text.ParseException e) {
            throw new RuntimeException(e);
        }
    }

    private static void get_most_followed_users() {
        JSONParser jsonParser = new JSONParser();
        JSONArray usersList = null;
        File file = new File("users.json");
        try {
            FileReader reader = new FileReader(file);
            Object obj = jsonParser.parse(reader);
            usersList = (JSONArray) obj;
            User user = null;
            ArrayList<User> usersArray = new ArrayList<>();
            for (int i = 0; i < usersList.size(); i++) {
                JSONObject userJSON = (JSONObject)usersList.get(i);
                user = new User(userJSON);
                usersArray.add(user);
            }
            Collections.sort(usersArray, Comparator.reverseOrder());

            ArrayList<String> usersInfo = new ArrayList<>();
            for (int i = 0; i < usersArray.size() && i < 5; i++) {
                String info = "{'username':'" + usersArray.get(i).getUsername() + "','number_of_followers':'" + usersArray.get(i).getNrFollowers() + "'}";
                usersInfo.add(info);

            }
            System.out.print("{ 'status' : 'ok', 'message' : " + usersInfo.toString().replace(", ", ",").replace("}]", "} ]") + "}");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }
    private static void get_most_liked_users() {
        JSONParser jsonParser = new JSONParser();
        JSONArray usersList = null;
        JSONArray postsList = null;
        JSONArray commentsList = null;
        File file1 = new File("users.json");
        File file2 = new File("posts.json");
        File file3 = new File("comments.json");
        class User2 extends User {
            private Integer nrLikes = 0;

            public Integer getNrLikes() {
                return nrLikes;
            }

            public void countLikes(Integer nrLikes) {
                this.nrLikes += nrLikes;
            }

            public User2(JSONObject userJSON) {
                super(userJSON);
            }
            public int compareTo (Object o) {
                if (nrLikes < ((User2)o).getNrLikes()) {
                    return -1;
                } else if (nrLikes > ((User2)o).getNrLikes()) {
                    return 1;
                }
                return  0;
            }
        }
        try {
            FileReader reader1 = new FileReader(file1);
            Object obj1 = jsonParser.parse(reader1);
            usersList = (JSONArray) obj1;
            User2 user = null;
            Post post = null;
            Comment comment = null;

            if (file2.length() != 0) {
                FileReader reader2 = new FileReader(file2);
                Object obj2 = jsonParser.parse(reader2);
                postsList = (JSONArray) obj2;
            }

            if (file3.length() != 0) {
                FileReader reader3 = new FileReader(file3);
                Object obj3 = jsonParser.parse(reader3);
                commentsList = (JSONArray) obj3;
            }

            ArrayList<User2> usersArray = new ArrayList<>();
            for (int i = 0; i < usersList.size(); i++) {
                JSONObject userJSON = (JSONObject)usersList.get(i);
                user = new User2(userJSON);
                //ArrayList<Integer> postsIndexes = user.getPosts();
                JSONArray postsIds= (JSONArray) user.getPosts();
                JSONArray commentsIds= (JSONArray) user.getComments();
                //System.out.print(postsIndexes);
                for (Object j: postsIds) {
                    JSONObject postJSON = (JSONObject)postsList.get(((Long)j).intValue() - 1);
                    post = new Post(postJSON);
                    user.countLikes(post.getNrLikes());
                }
                for (Object k: commentsIds) {
                    JSONObject commentJSON = (JSONObject)commentsList.get(((Long)k).intValue() - 1);
                    comment = new Comment(commentJSON);
                    user.countLikes(comment.getNrLikes());
                }
                usersArray.add(user);

            }
            Collections.sort(usersArray, Comparator.reverseOrder());

            ArrayList<String> usersInfo = new ArrayList<>();
            for (int i = 0; i < usersArray.size() && i < 5; i++) {
                String info = "{'username':'" + usersArray.get(i).getUsername() + "','number_of_likes':'" + usersArray.get(i).getNrLikes() + "'}";
                usersInfo.add(info);

            }
            System.out.print("{ 'status' : 'ok', 'message' : " + usersInfo.toString().replace(", ", ",") + "}");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        } catch (java.text.ParseException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(java.lang.String[] strings) {
        if (strings == null) {
            System.out.print("Hello world!");
            return;
        }
        String username = null;
        String password;
        User user = null;
        Integer id = null;
        Integer idPost = null;
        String text;
        if (!strings[0].equals("-create-user") && !strings[0].equals("-cleanup-all")) {
            //login
            if (strings.length < 3) {
                System.out.print("{'status':'error','message':'You need to be authenticated'}");
                return;
            }
            if (!strings[1].startsWith("-u") || !strings[2].startsWith("-p")) {
                System.out.print("{'status':'error','message':'Login failed'}");
                return;
            }
            username = strings[1].substring("-u ".length()).replace("'", "");
            password = strings[2].substring("-p ".length()).replace("'", "");
            user = login(username, password);
            if (user == null) {
                System.out.print("{'status':'error','message':'Login failed'}");
                return;
            }
        }

        switch (strings[0]) {
            case "-create-user":
                if (strings.length == 1) {
                    System.out.print("{ 'status' : 'error', 'message' : 'Please provide username'}");
                    break;
                } else if (strings.length == 2) {
                    System.out.print("{ 'status' : 'error', 'message' : 'Please provide password'}");
                    break;
                }
                username = strings[1].substring("-u ".length()).replace("'", "");
                password = strings[2].substring("-p ".length()).replace("'", "");
                create_user(username, password);
                break;

            case "-create-post":
                if (strings.length == 3) {
                    System.out.print("{'status':'error','message':'No text provided'}");
                    break;
                }
                text = strings[3].substring("-text ".length()).replace("'", "");
                if (strings[3].length() > 300) {
                    System.out.print("{'status':'error','message':'Post text length exceeded'}");
                    break;
                }
                user.create_post(text);
                break;

            case "-delete-post-by-id":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-id ".length()).replace("'", ""));
                user.delete_post(id);
                break;

            case "-comment-post":
                if (strings.length == 3) {
                    System.out.print("{'status':'error','message':'No text provided'}");
                    break;
                }
                idPost = Integer.valueOf(strings[3].substring("-post-id ".length()).replace("'", ""));
                text = strings[4].substring("-text ".length()).replace("'", "");
                if (strings[4].length() > 300) {
                    System.out.print("{'status':'error','message':'Comment text length exceeded'}");
                    break;
                }
                user.create_comment(idPost, text);
                break;

            case "-delete-comment-by-id":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-id ".length()).replace("'", ""));
                user.delete_comment(id);
                break;

            case "-follow-user-by-username":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                    break;
                }
                username = strings[3].substring("-username ".length()).replace("'", "");
                user.follow_user(username);
                break;

            case "-unfollow-user-by-username":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                    break;
                }
                username = strings[3].substring("-username ".length()).replace("'", "");
                user.unfollow_user(username);
                break;

            case "-like-post":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-post-id ".length()).replace("'", ""));
                Post.like_post(user, id);
                break;

            case "-unlike-post":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-post-id ".length()).replace("'", ""));
                Post.unlike_post(user, id);
                break;

            case "-like-comment":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-comment-id ".length()).replace("'", ""));
                Comment.like_comment(user, id);
                break;

            case "-unlike-comment":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-comment-id ".length()).replace("'", ""));
                Comment.unlike_comment(user, id);
                break;
            case "-get-following":
                user.get_following();
                break;

            case "-get-followers":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                    break;
                }
                username = strings[3].substring("-username ".length()).replace("'", "");
                User.get_followers(username);
                break;

            case "-get-followings-posts":
                Post.get_followings_posts(user);
                break;

            case "-get-user-posts":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                    break;
                }
                username = strings[3].substring("-username ".length()).replace("'", "");
                Post.get_user_posts(user, username);
                break;

            case "-get-post-details":
                if (strings.length == 3) {
                    System.out.print("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                    break;
                }
                id = Integer.valueOf(strings[3].substring("-post-id ".length()).replace("'", ""));
                Post.get_post_details(user, id);
                break;

            case "-get-most-liked-posts":
                get_most_liked_posts();
                break;
            case "-get-most-commented-posts":
                get_most_commented_posts();
                break;
            case "-get-most-followed-users":
                get_most_followed_users();
                break;
            case "-get-most-liked-users":
                get_most_liked_users();
                break;

            case "-cleanup-all":
                File packageDirectory = new File("./");
                File[] files = packageDirectory.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.isFile() && file.getName().endsWith(".json")) {
                            try (FileWriter writer = new FileWriter(file, false)) {
                                writer.write("");
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'Cleanup failed'}");
                }
                System.out.print("{ 'status' : 'ok', 'message' : 'Cleanup finished successfully'}");
                break;
        }
    }
}
